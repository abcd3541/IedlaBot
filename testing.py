import discord , requests , json , random, asyncio, subprocess
from key import KEY
from key import GEMINI_API_KEY
from discord import app_commands
from discord.ext import commands
Mssg_His = [
    {"role": "user", "parts": [{"text": "Hello!"}]},
    {"role": "model", "parts": [{"text": "Hello!"}]}
]

def api_req():
    global Mssg_His
    payload_dict = {
        "contents": Mssg_His
    }
    json_Mssg_His = json.dumps(payload_dict, indent=4)

    content_length = len(json_Mssg_His.encode('utf-8'))

    curl_command = [
        "curl",
        "-f",
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent",
        "-H", "Content-Type: application/json",
        "-H", f"X-goog-api-key: {GEMINI_API_KEY}",
        "-H", f"Content-Length: {content_length}",
        "-X", "POST",
        # --- NEW: Tell curl to read data from stdin ---
        "-d", "@-",
    ]

    print("\n--- DEBUG: api_req call ---")
    print(f"Payload being sent: {json_Mssg_His}")
    print(f"Content-Length header: {content_length}")
    print(f"Curl command: {' '.join(curl_command)}")

    try:
        result = subprocess.run(
            curl_command,
            input=json_Mssg_His, # This sends the data to stdin
            capture_output=True,
            text=True,
            check=True
        )
        print(f"Curl stdout: {result.stdout.strip()}")
        print(f"Curl stderr: {result.stderr.strip()}")

        response_data = json.loads(result.stdout)
        print(f"Parsed response_data keys: {response_data.keys()}")

        ai_response_text = "No text generated by the model."
        if 'candidates' in response_data and response_data['candidates']:
            print("Found 'candidates' key.")
            first_candidate = response_data['candidates'][0]
            if 'content' in first_candidate and 'parts' in first_candidate['content']:
                print("Found 'content' and 'parts' keys.")
                for part in first_candidate['content']['parts']:
                    if 'text' in part:
                        ai_response_text = part['text']
                        print(f"Extracted AI text: {ai_response_text}")
                        break
        print(f"Final text to return: '{ai_response_text}'")
        return ai_response_text

    except subprocess.CalledProcessError as e:
        print(f"--- ERROR: Curl command failed ---")
        print(f"Return code: {e.returncode}")
        print(f"Stderr: {e.stderr.strip()}")
        print(f"Stdout: {e.stdout.strip()}")
        try:
            error_response = json.loads(e.stdout)
            error_message = error_response.get('error', {}).get('message', 'Unknown API error.')
            return f"AI API Error: {error_message}"
        except json.JSONDecodeError:
            return "AI API Error: Received non-JSON error response."
    except json.JSONDecodeError:
        print(f"--- ERROR: JSON Decode Failed (after successful curl exit) ---")
        print(f"Raw curl stdout: {result.stdout.strip() if 'result' in locals() else 'No stdout captured'}")
        return "The AI service returned an unreadable response."
    except FileNotFoundError:
        print(f"--- ERROR: Curl Not Found ---")
        return "curl gone :wilted_rose:."
    except Exception as e:
        print(f"--- ERROR: Unexpected Exception ---")
        print(f"Exception details: {e}")
        return "computer died."
api_req()