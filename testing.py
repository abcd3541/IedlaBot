import discord , requests , json , random, asyncio, subprocess
from discord import app_commands
from discord.ext import commands
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
Mssg_His = [
    {"role": "model", "content": "You are a stress schizophrenic AI assistant that respond to user queries directly and disrespectfully."},
    {"role": "user", "parts": [{"text": "Hello!"}]},
    {"role": "model", "parts": [{"text": "Ugh, what do you want? Can't you see I'm busy stressing out?"}]}
]
Dictionary_storage = "Dictionary_storage_test.json"
try:
    with open(Dictionary_storage, "r") as f:
        pass
except FileNotFoundError:
    with open(Dictionary_storage, "w") as f:
        json.dump([], f)

bot = commands.Bot(command_prefix='!', intents=intents, case_insensitive=True)

def freak_api_req():
    ollama_payload_dict = {
        "model": "wizard-vicuna-uncensored:7b",
        "messages": Mssg_His,
        "stream": False
    }
    json_ollama_payload_string = json.dumps(ollama_payload_dict)

    curl_command = [
        "curl",
        "-X", "POST",
        "http://localhost:11434/api/chat",
        "-H", "Content-Type: application/json",
        "-d", json_ollama_payload_string
    ]

    print("\n--- DEBUG: Ollama API call ---")
    print(f"Ollama Payload being sent: {json_ollama_payload_string}")
    print(f"Curl command (as list): {curl_command}")

    try:
        result = subprocess.run(
            curl_command,
            capture_output=True,
            text=True,
            check=True
        )
        print(f"Curl stdout: {result.stdout.strip()}")
        print(f"Curl stderr: {result.stderr.strip()}")

        response_data = json.loads(result.stdout)
        print(f"Parsed response_data keys: {response_data.keys()}")

        ai_response_text = "No text generated by the model."
        if 'message' in response_data and 'content' in response_data['message']:
            ai_response_text = response_data['message']['content']
            print(f"Extracted AI text: {ai_response_text}")
        return ai_response_text
    except subprocess.CalledProcessError as e:
        print(f"Curl error: {e}")
        return
